package main

import (
	"fmt"
	"strings"
)

// Exercise 1: FizzBuzz
// Print numbers 1-100, but replace multiples of 3 with "Fizz"
// multiple of 5 with "Buzz", and multiple of both with "FizzBuzz"
func fizzBuzz() {
	fmt.Println("== Exercise 1: FizzBuzz ==")
	for i := 1; i <= 100; i++ {
		switch {
		case i%15 == 0:
			fmt.Printf("FizzBuzz ")
		case i%3 == 0:
			fmt.Printf("Fizz ")
		case i%5 == 0:
			fmt.Printf("Buzz ")
		default:
			fmt.Printf("%d", i)
		}
		if i%10 == 0 {
			fmt.Println()
		}
	}
	fmt.Println()
}

// Exercise 2: Palindrome Checker
// Check if a string reads the same forwards and backwards
func isPalindrome(s string) bool {
	// Convert to lowercase and remove spaces for easier comparision
	s = strings.ToLower(strings.ReplaceAll(s, " ", ""))

	// Convert to runes to properly handle Unicode characters
	runes := []rune(s)

	for i := 0; i < len(runes)/2; i++ {
		if runes[i] != runes[len(runes)-1-i] {
			return false
		}
	}
	return true
}

// Exercise 3: Factorial Calulator
// Calculate the factorial of a number (n!)
func factorial(n int) int {
	if n <= 1 {
		return 1
	}
	return n * factorial(n-1)
}

// Exercise 4: Find Maximum in Slice
// Find the largest number in a slice of integers
func findMax(numbers []int) int {
	if len(numbers) == 0 {
		return 0
	}

	max := numbers[0]
	for _, num := range numbers {
		if num > max {
			max = num
		}
	}
	return max
}

// Exercise 5: Count Vowels
// Count the number of vowels in a string
func countVowels(s string) int {
	vowels := "aeiouAEIOU"
	count := 0

	for _, char := range s {
		if strings.ContainsRune(vowels, char) {
			count++
		}
	}
	return count
}

// Exercise 6: Reverse a String
// Reverse the characters in a string
func reverseString(s string) string {
	runes := []rune(s)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return string(runes)
}

// Exercise 7: Sum of Digits
// Calculate the sum of all digits in a number
func sumOfDigits(n int) int {
	if n < 0 {
		n = -n
	}

	sum := 0
	for n > 0 {
		sum += n % 10
		n /= 10
	}
	return sum
}

// Exercise 8: Prime Number Checker
// Check if a number is prime
func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if n == 2 {
		return true
	}
	if n%2 == 0 {
		return false
	}

	for i := 3; i*i <= n; i += 2 {
		if n%i == 0 {
			return false
		}
	}
	return true
}

// Exercise 9: Word Counter
// Count the number of words in a string
func countWords(s string) int {
	words := strings.Fields(s)
	return len(words)
}

// Exercise 10: Remove Duplicates for Slice
// Remove duplicate integers from a slice while preserving order
func removeDuplicates(numbers []int) []int {
	seen := make(map[int]bool)
	var result []int

	for _, num := range numbers {
		if !seen[num] {
			seen[num] = true
			result = append(result, num)
		}
	}
	return result
}

// Exercises generated by Claude
func main() {
	// Test all exercises
	fmt.Printf("Go Programming Practice Exercises\n\n")

	// Exercise 1
	fizzBuzz()

	// Exercise 2
	fmt.Println("== Exercise 2: Palindrome Checker ==")
	testStrings := []string{"racecar", "hello", "A man a plan a canal Panama", "race a car"}
	for _, s := range testStrings {
		fmt.Printf("'%s' is palindrome: %t\n", s, isPalindrome(s))
	}
	fmt.Println()

	// Exercise 3
	fmt.Println("== Exercise 3: Factorial ==")
	for i := 0; i <= 6; i++ {
		fmt.Printf("%d! = %d\n", i, factorial(i))
	}
	fmt.Println()

	// Exercise 4
	fmt.Println("== Exercise 4: Find Maximum ==")
	numbers := []int{27, 3, 7, 2, 9, 1, 8, 5}
	fmt.Printf("Max in %v: %d\n", numbers, findMax(numbers))
	fmt.Println()

	// Exercise 5
	fmt.Println("== Exercise 5: Count Vowels ==")
	text := "My name is Ricardo Campos"
	fmt.Printf("Vowels in '%s': %d\n", text, countVowels(text))
	fmt.Println()

	// Exercise 6
	fmt.Println("== Exercise 6: Reverse String ==")
	original := "golang"
	fmt.Printf("'%s' reversed: '%s'\n", original, reverseString(original))
	fmt.Println()

	// Exercise 7
	fmt.Println("== Exercise 7: Sum of Digits ==")
	number := 123451
	fmt.Printf("Sum of digits in %d: %d\n", number, sumOfDigits(number))
	fmt.Println()

	// Exercise 8
	fmt.Println("== Exercise 8: Prime Checker ==")
	testNumbers := []int{2, 3, 4, 17, 18, 29, 30}
	for _, n := range testNumbers {
		fmt.Printf("%d is prime: %t\n", n, isPrime(n))
	}
	fmt.Println()

	// Exercise 9
	fmt.Println("== Exercise 9: Word Counter ==")
	sentence := "The quick brown fox jumps"
	fmt.Printf("Words in '%s': %d\n", sentence, countWords(sentence))
	fmt.Println()

	// Exercise 10
	fmt.Println("== Exercise 10: Remove Duplicates ==")
	withDuplicates := []int{1, 2, 2, 3, 4, 4, 5}
	fmt.Printf("Original: %v\n", withDuplicates)
	fmt.Printf("Without duplicates: %v\n", removeDuplicates(withDuplicates))
}
